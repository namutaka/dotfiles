# vim toml

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
# ファイルリストビュー
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <Leader><Leader> :NERDTreeToggle<CR>
'''

[[plugins]]
# Git操作
# :Gstatus, :GBlame
repo = 'tpope/vim-fugitive'

[[plugins]]
# ファイルタイプ判定
repo = 'Shougo/context_filetype.vim'

# シンタックスが分かりにくいのでOFF
# [[plugins]]
# # カーソル下に応じてファイルタイプ変更
# repo = 'osyo-manga/vim-precious'
# depens = 'context_filetype.vim'

# coc.nvimで十分っぽいので無効化
# [[plugins]]
# # 入力候補表示
# # install: 'pip3 install --user pynvim'
# repo = 'Shougo/deoplete.nvim'
# depends = 'context_filetype.vim'
# on_event = 'InsertEnter'
# hook_source = '''
# let g:deoplete#enable_at_startup = 1
# let g:deoplete#disable_auto_complete = 1
# inoremap <expr> <C-n>  deoplete#mappings#manual_complete()
# '''
#
# [[plugins]]
# # deoplete.nvimから依存. neovimで無いとき必要
# repo = 'roxma/nvim-yarp'
# if   = '! has("nvim")'
# on_source = ['deoplete.nvim']
#
# [[plugins]]
# # deoplete.nvimから依存. neovimで無いとき必要
# repo = 'roxma/vim-hug-neovim-rpc'
# if   = '! has("nvim")'
# on_source = ['deoplete.nvim']

[[plugins]]
# 非同期処理用
repo = 'Shougo/vimproc.vim'
build  = 'make'

[[plugins]]
# operator-replaceの前提
repo = 'kana/vim-operator-user'

[[plugins]]
# RwなどでYankしてるもので置き換える
repo = 'kana/vim-operator-replace'
depends = ['vim-operator-user']
hook_add = '''
nmap <C-p> <Plug>(operator-replace)
'''

[[plugins]]
# Ysurround
# s, ssで選択範囲を指定文字でくくる
repo = 'tpope/vim-surround'
hook_add = '''
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
'''

#[[plugins]]
# カーソルが飛びすぎるので使うのやめる
## vim-smartword : 単語移動がスマートな感じで
#repo = 'vim-scripts/smartword'
#hook_add = '''
#map w  <Plug>(smartword-w)
#map b  <Plug>(smartword-b)
#map e  <Plug>(smartword-e)
#map ge  <Plug>(smartword-ge)
#'''

# 暴発して使いにくいので無効
#[[plugins]]
## multi cursor 操作
## https://github.com/terryma/vim-multiple-cursors
#repo = 'terryma/vim-multiple-cursors'
#hook_add = '''
#" 始動キーを <C-n> は使っているので変える
#let g:multi_cursor_start_word_key      = '<C-m>'
#'''

[[plugins]]
# easy-align
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap <ENTER> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
" nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
# open-blowser.vim
repo = 'tyru/open-browser.vim'
hook_add = '''
" カーソル下のURLをブラウザで開く
nmap fu <Plug>(openbrowser-open)
vmap fu <Plug>(openbrowser-open)
" カーソル下のキーワードをググる
nnoremap fs :<C-u>OpenBrowserSearch<Space><C-r><C-w><CR>
vnoremap fs "xy:<C-u>OpenBrowserSearch<Space><C-R>x<CR>
'''


[[plugins]]
# unite.vim
repo = 'Shougo/unite.vim'
hook_add = '''
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    <C-q>  [unite]

nnoremap [unite]u  :<C-u>Unite -no-split<Space>
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>

" grep検索
nnoremap <silent> [unite]g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" カーソル位置の単語をgrep検索
nnoremap <silent> [unite]gr :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
" grep検索結果の再呼出
nnoremap <silent> [unite]gg  :<C-u>UniteResume search-buffer<CR>

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings() "{{{
  " Overwrite settings.
  imap <buffer> <C-j>    <Plug>(unite_insert_leave)
  imap <buffer> <C-BS>   <Plug>(unite_delete_backward_path)
  " Start insert.
endfunction "}}}

let g:unite_enable_start_insert = 0
let g:unite_source_file_mru_limit = 200
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

" ag はUTF-8 以外のファイルをbinary扱いしてしまうので止める
"" unite grep に ag(The Silver Searcher) を使う
"if executable('ag')
"  let g:unite_source_grep_command = 'ag'
"  let g:unite_source_grep_default_opts = '--all-types --nogroup --nocolor --column'
"  let g:unite_source_grep_recursive_opt = ''
"endif

" ripgrep を検索に使う
if executable('rg')
  let g:unite_source_grep_command = 'rg'
  let g:unite_source_grep_default_opts = '--line-number --no-heading --color never'
  let g:unite_source_grep_recursive_opt = ''
  "let g:unite_source_grep_encoding='utf-8'
endif
'''

[[plugins]]
# QuickRun
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {}
let g:quickrun_config['_'] = {
\  'split' : '',
\  'runner' : 'vimproc',
\  'runner/vimproc/updatetime' : 60
\}
let g:quickrun_config['ruby.rspec'] = {'command': 'bundle', 'cmdopt': ' exec rspec -f d',}
let g:quickrun_config['ruby.test'] = {'command': 'ruby', 'cmdopt': '-I test', 'runmode' : 'async:vimproc'}
let g:quickrun_config['ruby.runner'] = {'command': 'ruby', 'cmdopt': './script/runner', 'runmode' : 'async:vimproc'}
let g:quickrun_config['ruby.bundle'] = { 'command': 'ruby', 'cmdopt': 'bundle exec', 'exec': '%o %c %s' }
let g:quickrun_config['java'] = {
\   'exec': ['javac -encoding utf-8 %o %s', '%c %s:t:r %a', ':call delete("%S:t:r.class")'],
\   'output_encode': '&termencoding',
\ }
let g:quickrun_config['python.android'] = {'command' : 'monkeyrunner' }
let g:quickrun_config['coffee.compile'] = {'command' : 'coffee', 'cmdopt' : '-bpc'}
let g:quickrun_config['javascript'] = {'type' : 'javascript/nodejs'}

augroup RubyTest
  autocmd!
  autocmd BufWinEnter,BufNewFile *_test.rb set filetype=ruby.test
  autocmd BufWinEnter,BufNewFile *_spec.rb set filetype=ruby.rspec
augroup END
'''

# [[plugins]]
# # 非同期コードチェック
# #
# # 言語別linter
# # :vim: pip install vim-vint
# # :bash: npm i -g bash-language-server (https://github.com/mads-hartmann/bash-language-server)
# # :python: pip install 'python-language-server[all]'
# #
# repo = 'w0rp/ale'
# hook_add = '''
#
# " airlineでlint結果表示(FIXME なぜかちゃんと動かない)
# let g:airline#extensions#ale#enabled = 1
# let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
#
# " エラー行に表示するマーク
# let g:ale_sign_error = '⨉'
# let g:ale_sign_warning = '⚠'
#
# " auto-complete
# let g:ale_completion_enabled = 0
#
# let g:ale_sign_column_always = 1
#
# " ファイルを開いたときにlint実行
# let g:ale_lint_on_enter = 1
# " pipenv使用
# let g:ale_python_auto_pipenv = 1
#
# " 言語別 デフォルト外のlinter設定
# let g:ale_linters = {
# \ 'python': ['pyls', 'pylint']
# \}
# let g:ale_fixers = {
# \ 'python': ['isort']
# \}
# '''

[[plugins]]
# Coc : VSCode的なオートコンプリート & LSP & lint
# https://github.com/neoclide/coc.nvim
repo = 'neoclide/coc.nvim'
source = 'release'
build = 'coc#util#install()'
hook_add = '''

" coc.nvimでのバグ回避(https://github.com/neoclide/coc.nvim/issues/649)
set nowritebackup

set signcolumn=yes

" swapファイルへの書き込みの無操作待ち時間(ms)
" coc.nvim のおすすめ設定
set updatetime=300

" Enterキーで補完を確定させる
" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"


" タブで補完メニューのカーソル移動。また、補完メニューを開く
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()"
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

'''


[[plugins]] # indent可視化 https://github.com/Yggdroot/indentLine
repo = 'Yggdroot/indentLine'
hook_add = '''
" 装飾系文字を非表示にしないようにする(conceallevel)
let g:indentLine_conceallevel = 0
'''

