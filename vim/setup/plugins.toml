# vim toml

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_source = '''
let g:airline_theme='dark'
let g:airline#extensions#coc#enabled = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
# ファイルリストビュー
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <Leader><Leader> :NERDTreeToggle<CR>
'''

[[plugins]]
# Git操作
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
if   = 'has("nvim")'
lua_source = '''
require('gitsigns').setup()
'''

[[plugins]]
# ファイルタイプ判定
repo = 'Shougo/context_filetype.vim'

[[plugins]]
# 非同期処理用
repo = 'Shougo/vimproc.vim'
build  = 'make'

[[plugins]]
# operator-replaceの前提
repo = 'kana/vim-operator-user'

[[plugins]]
# RwなどでYankしてるもので置き換える
repo = 'kana/vim-operator-replace'
depends = ['vim-operator-user']
hook_add = '''
nmap <C-p> <Plug>(operator-replace)
'''

[[plugins]]
# Ysurround
# s, ssで選択範囲を指定文字でくくる
repo = 'tpope/vim-surround'
hook_add = '''
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
'''

[[plugins]]
# easy-align
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap <ENTER> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
" nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
# open-blowser.vim
repo = 'tyru/open-browser.vim'
hook_add = '''
" カーソル下のURLをブラウザで開く
nmap fu <Plug>(openbrowser-open)
vmap fu <Plug>(openbrowser-open)
" カーソル下のキーワードをググる
nnoremap fs :<C-u>OpenBrowserSearch<Space><C-r><C-w><CR>
vnoremap fs "xy:<C-u>OpenBrowserSearch<Space><C-R>x<CR>
'''


[[plugins]]
# QuickRun
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {}

let g:quickrun_config['_'] = {
\  'split' : '',
\  'runner' : 'vimproc',
\  'runner/vimproc/updatetime' : 60,
\}
let g:quickrun_config['java'] = {
\   'exec': ['javac -encoding utf-8 %o %s', '%c %s:t:r %a', ':call delete("%S:t:r.class")'],
\   'output_encode': '&termencoding',
\ }
let g:quickrun_config['python'] = {'command' : 'python3' }
let g:quickrun_config['javascript'] = {'type' : 'javascript/nodejs'}

" quick-vim
nnoremap <Leader>r <Plug>(quickrun)
vnoremap <Leader>r <Plug>(quickrun)

'''

[[plugins]]
# Coc : VSCode的なオートコンプリート & LSP & lint
# https://github.com/neoclide/coc.nvim
repo = 'neoclide/coc.nvim'
source = 'release'
build = 'coc#util#install()'
hook_add = '''

" config ファイルの場所(nvimとvimで共通にするため)
let g:coc_config_home = expand('~/.config/nvim')

" coc.nvimでのバグ回避(https://github.com/neoclide/coc.nvim/issues/649)
set nowritebackup

" Enterキーで補完を確定させる
" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"


" タブで補完メニューのカーソル移動。また、補完メニューを開く
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()"
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

noremap    [coc]   <Nop>
nmap    <Space>  [coc]
xmap    <Space>  [coc]
omap    <Space>  [coc]

" help
nmap [coc]? <CMD>map [coc]<CR>

" Symbol renaming.
nmap [coc]rn <Plug>(coc-rename)

" Formatting selected code.
xmap [coc]f  <Plug>(coc-format-selected)
nmap [coc]f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap [coc]a  <Plug>(coc-codeaction-selected)
nmap [coc]a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap [coc]ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap [coc]qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap [coc]cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

"
" ex command
"

" Add `:Format` command to format current buffer
command! -nargs=0 CcFormat :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? CcFold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 CcOR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}


"
" Mappings for CoCList
"

nnoremap [coclist] <Nop>
nmap <C-Space> [coclist]

" help
nmap [coclist]? <CMD>map [coclist]<CR>

" Show all diagnostics
nnoremap <silent><nowait> [coclist]a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> [coclist]e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> [coclist]c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> [coclist]o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> [coclist]s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> [coclist]j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> [coclist]k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> [coclist]p  :<C-u>CocListResume<CR>
'''

[[plugins]] # indent可視化 https://github.com/Yggdroot/indentLine
repo = 'Yggdroot/indentLine'
hook_add = '''
" 装飾系文字を非表示にしないようにする(conceallevel)
let g:indentLine_conceallevel = 0
'''

[[plugins]]
repo = 'jupyter-vim/jupyter-vim'
hook_add = '''
let g:jupyter_highlight_cells = 0
'''

[[plugins]]
# see: https://zenn.dev/mkobayashime/articles/nvim-treesitter-dein
repo = 'nvim-treesitter/nvim-treesitter'
if   = 'has("nvim")'
hook_post_update = 'TSUpdate'
lua_post_source = '''
require("nvim-treesitter.configs").setup {
  -- ここでハイライトしたい言語を指定しておくと、起動時にインストールされます
  ensure_installed = {
    "vim", "query", "lua", -- "help",
    "dockerfile",
    "typescript", "tsx", "javascript",
    "gitignore",
    "bash",
    "markdown",
    "json", "yaml", "toml",
    "css", "scss",
    "html",
    "scala"
  },
  highlight = {
    enable = true, -- ハイライトを有効化
    additional_vim_regex_highlighting = false, -- catpuucin用
    disable = {},
  },
　indent ={
　　enable =true,--言語に応じた自動インデントを有効化
  　disable ={"html"},-- htmlのインデントだけ無効化
　},
  autotag = {
    enable = true,
  },
}
'''

#
# ddu.vim
#

[[plugins]]
repo = 'vim-denops/denops.vim'
[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
function! IfNvim(nvimValue, vimValue)
  return has('nvim') ?  a:nvimValue : a:vimValue
endfunction


" Note: ff ui
" https://github.com/Shougo/ddu-ui-ff
call ddu#custom#patch_global({
\   'ui': 'filer',
\   'actionOptions': {
\     'narrow': {
\       'quit': v:false,
\     },
\   },
\   'sources': [
\     {'name': 'file', 'params': {}},
\     {'name': 'file_old', 'params': {}},
\   ],
\   'sourceOptions': {
\     'file': {
\       'matchers': ['matcher_hidden'],
\       'columns': ['filename'],
\     },
\     'buffer': {
\       'matchers': ['matcher_substring'],
\       'columns': [],
\     },
\   },
\   'kindOptions': {
\     'file': {
\       'defaultAction': 'open',
\     },
\   },
\   'uiParams': {
\     'ff': {
\       'startFilter': v:false,
\       'prompt': '> ',
\       'split': IfNvim('floating', 'no'),
\     },
\     'filer': {
\       'split': IfNvim('floating', 'no'),
\       'previewFloating': v:true,
\       'sort': 'filename',
\     }
\   },
\ })


" prefix key
nnoremap    [ddu]   <Nop>
nmap    <C-q>  [ddu]

nmap <silent> [ddu]? <Cmd>map [ddu]<CR>

nmap <silent> [ddu]f <Cmd>call ddu#start({})<CR>

nmap <silent> [ddu]b <Cmd>call ddu#start({
\   'ui': 'ff',
\   'sources': [{'name': 'buffer'}],
\ })<CR>


" ddu filer UI内の操作
autocmd FileType ddu-filer call s:ddu_filer_settings()
function! s:ddu_filer_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#filer#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#filer#do_action('toggleSelectItem')<CR>
  nnoremap <buffer> o
        \ <Cmd>call ddu#ui#filer#do_action('expandItem', {'mode': 'toggle'})<CR>
  nnoremap <buffer><silent> p
    \ <Cmd>call ddu#ui#filer#do_action('preview')<CR>
  nnoremap <buffer><silent> <S-CR>
        \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'cd'})<CR>

  " quit
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#filer#do_action('quit')<CR>
  nnoremap <buffer><silent> <ESC>
        \ <Cmd>call ddu#ui#filer#do_action('quit')<CR>

  " toggle hidden files
  nnoremap <buffer> I
    \ <Cmd>call ddu#ui#filer#do_action('updateOptions', {
    \   'sourceOptions': {
    \     'file': {
    \       'matchers': ToggleHidden(),
    \     },
    \   },
    \ })<CR>

  function! ToggleHidden()
    let current = ddu#custom#get_current(b:ddu_ui_name)
    let source_options = get(current, 'sourceOptions', {})
    let source_options_all = get(source_options, '_', {})
    let matchers = get(source_options_all, 'matchers', [])
    return empty(matchers) ? ['matcher_hidden'] : []
  endfunction
endfunction


" ddu ff UI内の操作
autocmd FileType ddu-ff call s:ddu_ff_settings()
function! s:ddu_ff_settings() abort
  nnoremap <buffer><silent> <CR>
    \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open'})<CR>

  nnoremap <buffer><silent> <Space>
    \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>

  nnoremap <buffer><silent> d
    \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'delete'})<CR>

  nnoremap <buffer><silent> a
    \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>

  nnoremap <buffer><silent> p
    \ <Cmd>call ddu#ui#ff#do_action('preview')<CR>

  nnoremap <buffer><silent> q
    \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  nnoremap <buffer><silent> <Esc>
    \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction

" ddu filter内の操作
autocmd FileType ddu-ff-filter call s:ddu_ff_filter_settings()
function! s:ddu_ff_filter_settings() abort
  inoremap <buffer><silent> <CR>  <Esc><Cmd>close<CR>
  nnoremap <buffer><silent> <CR>  <Cmd>close<CR>

  inoremap <buffer><silent> <Esc> <Esc><Cmd>call ddu#ui#ff#do_action('quit')<CR>
  nnoremap <buffer><silent> <Esc> <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction
'''
[[plugins]]
repo = 'Shougo/ddu-ui-ff'
[[plugins]]
repo = 'Shougo/ddu-ui-filer'
[[plugins]]
repo = 'Shougo/ddu-column-filename'
[[plugins]]
repo = 'Shougo/ddu-source-file'
[[plugins]]
repo = 'Shougo/ddu-source-file_old'
[[plugins]]
repo = 'shun/ddu-source-buffer'
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'
[[plugins]]
repo = 'Shougo/ddu-kind-file'

