# 使わなくなったプラグインの記録

#
# Fern
# うまくpluginが動かないのと操作感覚が微妙だった
#

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
echom "Fern setting"
function! s:fern_settings() abort
  " Use 'select' instead of 'edit' for default 'open' action
  " nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:select)

  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
  nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
  nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
  nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:fern_settings()
augroup END
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'
[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
[[plugins]]
repo = 'yuki-yano/fern-preview.vim'


# diff表示が微妙なので利用せず
[[plugins]]
# 単語ごとのdiff
repo = 'rickhowe/diffchar.vim'



# シンタックスが分かりにくいのでOFF
[[plugins]]
# カーソル下に応じてファイルタイプ変更
repo = 'osyo-manga/vim-precious'
depens = 'context_filetype.vim'


# coc.nvimで十分っぽいので無効化
[[plugins]]
# 入力候補表示
# install: 'pip3 install --user pynvim'
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#disable_auto_complete = 1
inoremap <expr> <C-n>  deoplete#mappings#manual_complete()
'''

[[plugins]]
# deoplete.nvimから依存. neovimで無いとき必要
repo = 'roxma/nvim-yarp'
if   = '! has("nvim")'
on_source = ['deoplete.nvim']

[[plugins]]
# deoplete.nvimから依存. neovimで無いとき必要
repo = 'roxma/vim-hug-neovim-rpc'
if   = '! has("nvim")'
on_source = ['deoplete.nvim']

# カーソルが飛びすぎるので使うのやめる
[[plugins]]
# vim-smartword : 単語移動がスマートな感じで
repo = 'vim-scripts/smartword'
hook_add = '''
map w  <Plug>(smartword-w)
map b  <Plug>(smartword-b)
map e  <Plug>(smartword-e)
map ge  <Plug>(smartword-ge)
'''


# 暴発して使いにくいので無効
[[plugins]]
# multi cursor 操作
# https://github.com/terryma/vim-multiple-cursors
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
" 始動キーを <C-n> は使っているので変える
let g:multi_cursor_start_word_key      = '<C-m>'
'''


# dduに乗り換え
[[plugins]]
# unite.vim
repo = 'Shougo/unite.vim'
hook_add = '''
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    <C-q>  [unite]

nnoremap [unite]u  :<C-u>Unite -no-split<Space>
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>

" grep検索
nnoremap <silent> [unite]g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" カーソル位置の単語をgrep検索
nnoremap <silent> [unite]gr :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
" grep検索結果の再呼出
nnoremap <silent> [unite]gg  :<C-u>UniteResume search-buffer<CR>

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings() "{{{
  " Overwrite settings.
  imap <buffer> <C-j>    <Plug>(unite_insert_leave)
  imap <buffer> <C-BS>   <Plug>(unite_delete_backward_path)
  " Start insert.
endfunction "}}}

let g:unite_enable_start_insert = 0
let g:unite_source_file_mru_limit = 200
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

" ag はUTF-8 以外のファイルをbinary扱いしてしまうので止める
"" unite grep に ag(The Silver Searcher) を使う
"if executable('ag')
"  let g:unite_source_grep_command = 'ag'
"  let g:unite_source_grep_default_opts = '--all-types --nogroup --nocolor --column'
"  let g:unite_source_grep_recursive_opt = ''
"endif

" ripgrep を検索に使う
if executable('rg')
  let g:unite_source_grep_command = 'rg'
  let g:unite_source_grep_default_opts = '--line-number --no-heading --color never'
  let g:unite_source_grep_recursive_opt = ''
  "let g:unite_source_grep_encoding='utf-8'
endif
'''


# cocに乗り換え
[[plugins]]
# 非同期コードチェック
#
# 言語別linter
# :vim: pip install vim-vint
# :bash: npm i -g bash-language-server (https://github.com/mads-hartmann/bash-language-server)
# :python: pip install 'python-language-server[all]'
#
repo = 'w0rp/ale'
hook_add = '''

" airlineでlint結果表示(FIXME なぜかちゃんと動かない)
let g:airline#extensions#ale#enabled = 1
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

" エラー行に表示するマーク
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'

" auto-complete
let g:ale_completion_enabled = 0

let g:ale_sign_column_always = 1

" ファイルを開いたときにlint実行
let g:ale_lint_on_enter = 1
" pipenv使用
let g:ale_python_auto_pipenv = 1

" 言語別 デフォルト外のlinter設定
let g:ale_linters = {
\ 'python': ['pyls', 'pylint']
\}
let g:ale_fixers = {
\ 'python': ['isort']
\}
'''


# ブラウザのテキスト入力欄をVIMにするプラグイン
# 以下の観点でNG
# * 日本語入力がうまくできない（vimrの問題が半分）
# * 表示が崩れる
# * 特定の場合のみVIMにする方法がない
[[plugins]]
repo = 'glacambre/firenvim'
if   = 'has("nvim")'
hook_post_update = 'firenvim#install(0)'
hook_add = '''
if exists('g:started_by_firenvim')
  augroup Firenvim
    au BufEnter * set guifont=Monaco:h18
  augroup END

  let s:firevim_auto_write = { 'timer_id': v:null }
  function! s:firevim_auto_write.inner_write(timer) abort
    let self.timer_id = v:null
    write
  endfunction

  function! s:firevim_auto_write.write() abort
    if self.timer_id != v:null
      echom self.timer_id
      call timer_stop(self.timer_id)
      let self.timer_id = v:null
    end

    let self.timer_id = timer_start(3000, s:firevim_auto_write.inner_write)
  endfunction

  autocmd TextChanged * ++nested call s:firevim_auto_write.write()
  autocmd TextChangedI * ++nested call s:firevim_auto_write.write()
endif
'''
lua_source ='''
vim.g.firenvim_config = {
    globalSettings = {
      alt = "all",
    },
    localSettings = {
        [".*"] = {
          selector = "",
          content  = "text",
          priority = 0,
          cmdline  = "neovim",
          takeover = "never"
        },
        -- [".*github.com.*"] = {
        --     cmdline  = "neovim",
        --     content  = "text",
        --     priority = 1,
        --     selector = "textarea",
        --     takeover = "always"
        -- },
        -- ["tickets.tools.misumi.jp/jira.*"] = {
        --     cmdline  = "neovim",
        --     content  = "text",
        --     priority = 1,
        --     selector = "textarea",
        --     takeover = "always"
        -- }
    }
}
'''
