" .vimrc
scriptencoding utf-8

let mapleader = ','              " キーマップリーダー
let maplocalleader = '.'

execute 'source' fnameescape(expand('~/.vim/setup/dein.vim'))

" 全体設定 {{{
syntax on

colorscheme desert

" true color利用
if !has('gui_running')
    \ && exists('&termguicolors')
    \ && $COLORTERM ==# 'truecolor'
  if !has('nvim')
    let &t_8f = "\e[38;2;%lu;%lu;%lum"
    let &t_8b = "\e[48;2;%lu;%lu;%lum"
  endif
  set termguicolors " ターミナルでTrueColorを使う
endif

set hidden
set nobackup
set noswapfile
set updatetime=300 " カーソル無操作のイベント発火までの時間(ms)

" insert mode 抜けた時にimeをoffにする設定らしいが機能せず
"set noimdisable " ime設定
"set iminsert=2

set mouse=a
if !has('nvim')
    set ttymouse=xterm2
endif
set whichwrap=b,s,h,l,<,>,[,]    " カーソルを行頭、行末で止まらないようにする
set splitbelow
set splitright
set virtualedit=block
set winaltkeys=no
set clipboard=unnamed,unnamedplus

" エンコーディング
set encoding=utf-8
set wildmode=longest:full,list:full
set ambiwidth=double

" パス設定
set runtimepath+=$HOME/.vim
let g:vimball_home = expand('~/.vim/bundle/vimball')
set undodir=$HOME/.vim/temp
set backupskip=/tmp/*,/private/tmp/*

let $PATH = join([
\   $PATH,
\   expand('~/local/bin'),
\   expand('~/.nodebrew/current/bin')
\ ], ':')

" 表示
set number
set nowrap
set showmatch  " 括弧の対応をハイライト
set showcmd    " 操作を最下部に表示
set scrolloff=5 " スクロール開始するカーソルの前後幅
set signcolumn=yes " 左端の指摘記号列を常に表示

" カーソル行ハイライト
set cursorline
highlight CursorLine term=reverse cterm=none ctermbg=232
highlight CursorLineNr term=reverse cterm=none ctermbg=232

"" 特殊文字表示
set list
set listchars=tab:>\ ,eol:\ ,trail:_,extends:\

"" fold設定
set foldmethod=syntax
set foldlevel=1000

" インデント
set tabstop=2
set shiftwidth=2
set softtabstop=0
set expandtab
set smartindent
set autoindent
set textwidth=0 " フォーマット時などでの１行の折り返し文字数
set smarttab " 行頭の余白内で Tab を打ち込むと'shiftwidth' の数だけインデントする
set breakindent " wrapで折り返し時に全行インデントする

" ステータスバー
set cmdheight=1
set laststatus=2


" 標準プラグインの制御

"" dicwin.vim を使わない(Kaoriya向け)
let plugin_dicwin_disable=1

"" netrw(使ってない)
let g:netrw_liststyle=3

"" plugin/close_buffer.vim
let g:close_buffer__next_dir = -1

" man page を :Man 〜〜で表示できるようにするプラグイン
runtime! ftplugin/man.vim

" grep.vim settings
let Grep_Find_Use_Xargs = 0

" DirDiff
let g:DirDiffExcludes = 'CVS,.*.swp,.svn,*.log,*.tmp,.DS_Store,thumb.db,.git'

" }}}


" Key mapping {{{

" for us-keyboard
noremap ; :
noremap : ;

" カーソルを表示行で移動する。論理行移動は<C-n>,<C-p>
nnoremap h <Left>
nnoremap j gj
nnoremap k gk
nnoremap l <Right>
nnoremap <Down> gj
nnoremap <Up>   gk

" CTRL-hjklでウィンドウ移動
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h

" ウインドウサイズ変更
nnoremap + <C-w>+
nnoremap - <C-w>-
nnoremap <F7> :wincmd ><CR>
nnoremap <F8> :wincmd <lt><CR>

" ウインドウ／タブ切り換え
nnoremap <silent> <C-Tab> :bn<CR>
nnoremap <silent> <C-S-Tab> :bp<CR>
nnoremap <silent> gt :tabnext<CR>
nnoremap <silent> gT :tabprev<CR>
" nnoremap <silent> <A-S-[> :tabnext<CR>
" nnoremap <silent> <A-S-]> :tabprev<CR>

" spaceで次のbufferへ。back-spaceで前のbufferへ
nmap <BS> ;bn<CR>
nmap <S-BS> ;bp<CR>

" 頻出文字入力
nmap <Leader><Space> a<Space><ESC>
nmap <Leader><CR> o<ESC>

" 新規バッファ
nnoremap <silent> <C-n> :enew<CR>

" 比較
command! Diff :windo diffthis
command! Doff :windo diffoff

" inc,dec
vnoremap <c-a> <c-a>gv
vnoremap <c-x> <c-x>gv

" }}}


" 検索設定 Search {{{

set wrapscan   " 最後まで検索したら先頭へ戻る
set ignorecase " 大文字小文字無視
set smartcase  " 検索文字列に大文字が含まれている場合は区別して検索する
set incsearch  " インクリメンタルサーチ
set hlsearch   " 検索文字をハイライト

if has('nvim')
  set inccommand=split " 置換をプレビュー
endif

"" :grep で実行するコマンド
let &grepprg="grep -n -r --exclude='tags' --exclude='*.db' --exclude='*.log'  --exclude='*.tmp' --exclude='*.svn*' --exclude='*.swp' $*"

"Escの2回押しでハイライト消去
nnoremap <ESC><ESC> :nohlsearch<CR><ESC>

" very magicを使う
nnoremap /  /\v

"選択した文字列を検索
vnoremap <silent> // y/<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>
"選択した文字列を置換
vnoremap /r "xy:%s/<C-R>=escape(@x, '\\/.*$^~[]')<CR>//gc<Left><Left><Left>

"s*置換後文字列/g<Cr>でカーソル下のキーワードを置換
nnoremap <expr> s* ':%substitute/\<' . expand('<cword>') . '\>/'

" Ctrl-iでヘルプ
nnoremap <Leader><C-i>  :<C-u>help<Space>
" カーソル下のキーワードをヘルプでひく
nnoremap <Leader><C-i><C-i> :<C-u>help<Space><C-r><C-w><Enter>

" カーソル下の単語でgrep
nnoremap <C-g><C-r> :grep<Space><C-r><C-w>

" }}}


" Utilities {{{

command! Sh set ft=sh

" .vimrcを開く
command! Vimrc edit ~/.vim/vimrc
command! VimPlugins edit ~/dotfiles/vim/setup/plugins.toml

" ファイル名とカーソルの行数をコピー
nmap <Leader>% ;let @+=(expand("%:p") . ":" . line("."))<CR>

" 保存時に行末の空白を除去する
fun! StripTrailingWhitespace()
    " Only strip if the b:noStripeWhitespace variable isn't set
    if exists('b:noStripWhitespace')
        return
    endif
    %s/\s\+$//e
endfun
autocmd BufWritePre * call StripTrailingWhitespace()


" バッファを閉じる
nnoremap <Leader>q :CloseBuffer<CR>

"タイムスタンプを挿入してinsertモードへ移行
nnoremap <Leader>n <ESC>i<C-R>=strftime("%Y/%m/%d %H:%M")<CR><ESC>
nnoremap <Leader>N <ESC>o<C-R>=strftime("%Y/%m/%d %H:%M")<CR><ESC>


" }}}


" Terminal {{{
"
" To map key to exit terminal-mode: >
tnoremap <C-\><C-\> <C-\><C-n>
tnoremap <C-T><C-T> <C-\><C-n>
tnoremap <C-T>h <C-\><C-N><C-w>h
tnoremap <C-T>j <C-\><C-N><C-w>j
tnoremap <C-T>k <C-\><C-N><C-w>k
tnoremap <C-T>l <C-\><C-N><C-w>l

" To simulate |i_CTRL-R| in terminal-mode: >
" tnoremap <expr> <C-R> '<C-\><C-N>"'.nr2char(getchar()).'pi'

" To use `ALT+{h,j,k,l}` to navigate windows from any mode: >
tnoremap <A-h> <C-\><C-N><C-w>h
tnoremap <A-j> <C-\><C-N><C-w>j
tnoremap <A-k> <C-\><C-N><C-w>k
tnoremap <A-l> <C-\><C-N><C-w>l

"
" }}}

" 自前設定用group
augroup MyAutoCmd
  autocmd!
augroup END

" FIXME 何故かunletをするとvim-airlineでの表示崩れをするので一旦機能OFF
" foldmethod=syntaxのときに入力が重いことへの対処 {{{
" https://qiita.com/izumin5210/items/7e0ad2f86d0686d8b376
"augroup MyAutoCmd
"  autocmd InsertEnter * if !exists('w:last_fdm')
"              \| let w:last_fdm=&foldmethod
"              \| setlocal foldmethod=manual
"              \| endif
"  autocmd InsertLeave,WinLeave * if exists('w:last_fdm')
"              \| let &l:foldmethod=w:last_fdm
"              \| unlet w:last_fdm
"              \| endif
"augroup END
"" }}}

" ファイルタイプ個別設定
augroup MyAutoCmd

  " yamlで':','#'を記入した時に自動インデント調整しないようにする
  autocmd Syntax yaml setl indentkeys-=<:> indentkeys-=0#

  "" 標準入力はUTF-8と見なす
  autocmd StdinReadPre * set fileencodings=utf-8

  "" textは自動改行なし
  autocmd FileType text setlocal textwidth=0

  "" git-commitメッセージ
  autocmd FileType gitcommit set fenc=utf-8|setlocal textwidth=0|DiffGitCached|resize 10

  " Quickfix
  autocmd QuickfixCmdPost make,grep,grepadd,vimgrep cwindow

  " tsv,csvは末尾スペースを許容する
  autocmd FileType tsv,csv let b:noStripWhitespace=1

  " nerdtree はsign列不要
  autocmd FileType nerdtree set signcolumn=no

  " markdown
  autocmd FileType markdown set wrap|let b:noStripWhitespace=1

augroup END

" vim:ft=vim foldmethod=marker sw=2
