#!/usr/bin/rake -f
# vim: set ft=ruby:

task :default do
  sh "/usr/bin/rake -f #{__FILE__} -T", verbose: false
end

def setFinderSetting(key, isOn)
  setDefaults "com.apple.finder", key, isOn
  sh "killall Finder"
end

def setDefaults(domain, key, isOn)
  sh "defaults write #{domain} #{key} #{isOn ? 'TRUE' : 'FALSE'}"
end

namespace :hidden do
  desc "Hide hidden files in Finer"
  task :hide do
    setFinderSetting "AppleShowAllFiles", false
  end

  desc "Show hidden files in Finer"
  task :show do
    setFinderSetting "AppleShowAllFiles", true
  end
end

namespace :quicklook do
  desc "Disable select text in QuickLook"
  task :disable do
    setFinderSetting "QLEnableTextSelection", false
  end

  desc "Enable select text in QuickLook"
  task :enable do
    setFinderSetting "QLEnableTextSelection", true
  end
end

namespace :dsstore do
  desc "DS Store don't write in networek drives"
  task :dontwrite do
    setDefaults "com.apple.desktopservices", "DSDontWriteNetworkStores", true
    puts "Please relogin"
  end

  desc "DS Store write in networek drives"
  task :write do
    setDefaults "com.apple.desktopservices", "DSDontWriteNetworkStores", false
    puts "Please relogin"
  end
end

namespace :pressHold do
  desc "Enable input source press and hold"
  task :enable do
    setDefaults "-g",  "ApplePressAndHoldEnabled", true
  end

  desc "Disable input source press and hold"
  task :disable do
    setDefaults "-g",  "ApplePressAndHoldEnabled", false
  end
end

namespace :proxy do
  NETWORKSERVICE = "Ethernet"

  def networksetup(task, *args)
    sh "sudo networksetup -#{task} #{NETWORKSERVICE} #{args.join(' ')}"
    secure = task.to_s.sub('webproxy', 'securewebproxy')
    if task.to_s != secure
      sh "sudo networksetup -#{secure} #{NETWORKSERVICE} #{args.join(' ')}"
    end
  end

  desc "Show proxy settings"
  task :state do
    networksetup(:getwebproxy)
    networksetup(:getproxybypassdomains)
  end

  desc "Proxy on"
  task :on do
    host = ENV['host']
    throw "host is required" if host.nil? or host.empty?

    networksetup(:setwebproxy, *host.split(':'))

    bypass = ENV['bypass']
    if bypass.nil? or bypass.empty?
      networksetup(:setproxybypassdomains, "*.local", "169.254/16")
    else
      networksetup(:setproxybypassdomains, "*.local", "169.254/16", bypass.split(','))
    end
  end

  desc "Proxy off"
  task :off do
    networksetup(:setwebproxystate, "off")
  end

end

